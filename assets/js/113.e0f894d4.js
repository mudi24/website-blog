(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{394:function(e,a,t){"use strict";t.r(a);var s=t(14),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"浅拷贝-只拷贝数据的第一层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝-只拷贝数据的第一层"}},[e._v("#")]),e._v(" 浅拷贝（只拷贝数据的第一层）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const shadowCopy = arr => arr.map(v => v) // 数组拷贝\nfunction shadowCopy(src) {\n  let result = Array.isArray(src) ? [] : {}\n  for(let key in src){\n    result[key] = src[key]\n  }\n  return result\n}\n")])])]),t("h3",{attrs:{id:"深拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function deepCopy(src){\n  let result = Array.isArray(src) ? [] : {}\n  for(let key in src){\n    if( typeof src[key] === 'object' && src[key] !== null) {\n      result[key] = deepCopy(src[key])\n    } else {\n      result[key] = src[key]\n    }\n  }\n  return result\n}\n")])])]),t("h3",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[e._v("#")]),e._v(" 正则表达式")]),e._v(" "),t("h4",{attrs:{id:"创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[e._v("#")]),e._v(" 创建")]),e._v(" "),t("ul",[t("li",[e._v("字面量方式创建"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let reg = /\\+86\\d{11}/g\n")])])])]),e._v(" "),t("li",[e._v("构造函数方式创建(正则规则可以通过字符串拼接)"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let reg = new RegExp('+86\\d{11}', 'g')\n")])])])]),e._v(" "),t("li",[e._v("reg.test(str) // 查看正则表达式与指定的字符串是够匹配")])]),e._v(" "),t("h4",{attrs:{id:"修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[e._v("#")]),e._v(" 修饰符")]),e._v(" "),t("ul",[t("li",[e._v("g: global 全文搜索(默认只搜索第一个匹配的结果)")]),e._v(" "),t("li",[e._v("i: ingore case 忽略大小写(默认大小写敏感)")]),e._v(" "),t("li",[e._v("m: multiple lines 多行搜索")])]),e._v(" "),t("h4",{attrs:{id:"范围匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范围匹配"}},[e._v("#")]),e._v(" 范围匹配")]),e._v(" "),t("ul",[t("li",[e._v("[abcd] 匹配一个字符，可以是 a b c d 中的任意一个")])]),e._v(" "),t("ul",[t("li",[e._v("[0-9] 匹配一个是 0 到 9 的数字")]),e._v(" "),t("li",[e._v("[a-zA-Z] 匹配一个不限制大小写的字母")]),e._v(" "),t("li",[e._v("[^abc] 表示一个不是字符 a 或 b 或 c 的字符")])]),e._v(" "),t("h4",{attrs:{id:"预定义匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义匹配"}},[e._v("#")]),e._v(" 预定义匹配")]),e._v(" "),t("ul",[t("li",[e._v(". 等价于 [^\\r\\n]，匹配一个除回车和换行以为的任意字符")]),e._v(" "),t("li",[e._v("\\d 等价于[0-9]，匹配一个数字字符")]),e._v(" "),t("li",[e._v("\\D 等价于[^0-9]， 匹配一个非数字字符")]),e._v(" "),t("li",[e._v("\\s 等价于[空格\\t\\n\\r\\v\\f]，匹配一个空白字符")]),e._v(" "),t("li",[e._v("\\S 等价于[^空格\\t\\n\\r\\v\\f]，匹配一个非空白字符")]),e._v(" "),t("li",[e._v("\\w 等价于[a-zA-Z_0-9]，匹配一个字母、数字、下划线")]),e._v(" "),t("li",[e._v("\\W 等价于[^a-za-z_0-9]，匹配一个非单词字符")])]),e._v(" "),t("h4",{attrs:{id:"匹配一次或多次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配一次或多次"}},[e._v("#")]),e._v(" 匹配一次或多次")]),e._v(" "),t("ul",[t("li",[e._v("? 前面的字符出现 0 次或者 1 次")]),e._v(" "),t("li",[e._v("+前面的字符出现 1 次或者多次")]),e._v(" "),t("li",[t("ul",[t("li",[e._v("前面的字符出现 0 次或者多次")])])]),e._v(" "),t("li",[e._v("{n} 前面的字符出现 n 次")]),e._v(" "),t("li",[e._v("{n,m} 前面的字符出现 n 到 m 次")]),e._v(" "),t("li",[e._v("{n,} 前面的字符出现至少 n 次")])]),e._v(" "),t("h4",{attrs:{id:"边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#边界"}},[e._v("#")]),e._v(" 边界")]),e._v(" "),t("ul",[t("li",[e._v("/^xyz/ 以 xyz 开头")]),e._v(" "),t("li",[t("code",[e._v("/abc$/")]),e._v(" 以 abc 结尾")]),e._v(" "),t("li",[e._v("/\\babc\\b/ 匹配是单词的 abc (左右两侧是字符串开头、结尾、中横线、空格) \\b 表示单词边界")]),e._v(" "),t("li",[e._v("/\\Babc\\B/ 匹配不是单词的 abc")])]),e._v(" "),t("h4",{attrs:{id:"实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[e._v("#")]),e._v(" 实例")]),e._v(" "),t("ul",[t("li",[e._v("匹配手机号")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/^1\\d{10}$/ // 以1开头长度为11的数字\n/^(\\+86)?1[358]\\d{9}$/ // 以+86或者1开头，3或者5或者8为第二位的长度为11的数字\n")])])]),t("ul",[t("li",[e._v("匹配邮箱")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("规则: 字符串中间包含一个@，@后面包含一个.\n/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/\n")])])]),t("ul",[t("li",[e._v("匹配用户名")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("规则: 合法用户至少8位至多15位，包含大写、小写、数字、下划线至少两种\n  function validUsername(rawInput) {\n      if(!/^\\w{8,15}$/.test(rawInput)) return false\n      if(/(^[a-z]+$)|(^[A-Z]+$)|(^[0-9]+$)|(^_+$)/.test(rawInput)) return false\n      return true\n  }\n")])])]),t("ul",[t("li",[e._v("字符串方法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'a1b2c3'.search(/\\d/) // 0\n'a1b2c3'.match(/\\d/g) //['1', '2', '3']\n'a1b2c3'.replace(/\\d/g, 'x') //'axbxcx'\n'a1a2c3'.replace(/a(\\d)/g, 'A$1') //'A1A2c3'\n'a1b2c3'.replace(/\\d/g, function(matched, $1, index) { })\n'1 2 3'.split(/\\s/) //['1', '2', '3']\n")])])]),t("h4",{attrs:{id:"贪婪模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[e._v("#")]),e._v(" 贪婪模式")]),e._v(" "),t("ul",[t("li",[e._v("默认是贪婪模式(尽可能多的匹配)，如果想使用贪婪模式可以在量词后加?即可")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'123456789'.match(/\\d{3,5}?/g)\n")])])]),t("h4",{attrs:{id:"分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[e._v("#")]),e._v(" 分组")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/(hello)|(hi) world/ //匹配 “hello world” 和 “hi world”\n\"hello8 world, hello6 reg\".replace(/hello(\\d)/g, 'hi$1') // $1代表正则里分组匹配的内容，输出 “hi8 world, hi6 reg”\n")])])]),t("h4",{attrs:{id:"前瞻"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前瞻"}},[e._v("#")]),e._v(" 前瞻")]),e._v(" "),t("ul",[t("li",[e._v("exp1(?=exp2) // 匹配后面是 exp2 的 exp1")]),e._v(" "),t("li",[e._v("exp1(?!exp2) // 匹配后面不是 exp2 的 exp1")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/hello(?=reg)/.test('reg') //true\n/hello(?=reg)/.test('helloWorld) //false\n/hello(?!reg)/.test('helloWorld') //true\n")])])]),t("h4",{attrs:{id:"regexp-prototype-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[e._v("#")]),e._v(" RegExp.prototype.exec")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("调用全局的 RegExp 对象的 exec()时，它会在 RegExp 实例的 lastIndex 属性指定的字符处开始检索字符串 string")]),e._v(" "),t("ul",[t("li",[e._v("当 exec()找到了与表达式相匹配的文本时，在匹配后，它将把 RegExp 实例的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。可以通过反复调用 exec()方法来遍历字符串中的所有匹配文本")]),e._v(" "),t("li",[e._v("当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  let reg = /\\b\\w+\\b/g, temp\n  while(temp = reg.exec('hello world, hi reg')) {\n        console.log(`${temp.index} : ${temp[0]}`)\n  }\n  /*输出\n      0 : hello\n      6 : world\n      13 : hello\n      19 : reg\n  */\n")])])])])]),e._v(" "),t("h4",{attrs:{id:"string-prototype-replace-reg-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace-reg-function"}},[e._v("#")]),e._v(" String.prototype.replace(reg, function)")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("第二个参数传入一个 function，会在每次匹配替换的时候调用，返回值为要替换的内容，回调函数一共有 3/4 个参数")]),e._v(" "),t("ul",[t("li",[e._v("第一个参数很简单，是匹配字符串")]),e._v(" "),t("li",[e._v("第二个参数是正则表达式分组内容，若没有分组则没有该参数")]),e._v(" "),t("li",[e._v("第三个参数是匹配项在字符串中的 index，若没有分组该为第二个参数")]),e._v(" "),t("li",[e._v("第四个参数则是原字符串，若没有分组该为第三个参数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  //把字符串转换成驼峰形式\n  let str = 'border-top-color'\n  const strToCamel = str =>\n        str.replace(/-(\\w)/g, (match, $1) => $1.toUpperCase())\n  console.log( strToCamel(str) )\n")])])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);