(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{331:function(t,n,s){"use strict";s.r(n);var e=s(14),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"react-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-组件"}},[t._v("#")]),t._v(" React 组件")]),t._v(" "),s("ul",[s("li",[t._v("元素与组件"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("React 元素（d小写）\nconst div = React.createElement('div',...)\nReact 组件（D大写)\nconst Div = () => React.createElement('div',...)\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"函数组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组件"}},[t._v("#")]),t._v(" 函数组件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('  function Welcome(props){\n    return <h1>Hello, {props.name}</h1>;\n  }\n  使用方法: <Welcome name="frank"/>\n')])])]),s("h4",{attrs:{id:"类组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类组件"}},[t._v("#")]),t._v(" 类组件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('  class Welcome extends React.Component{\n    constructor(){\n      super()\n      this.state = {n:0}\n    }\n    render(){\n      return <h1>Hello, {this.props.name}</h1>\n    }\n  }\n  使用方法: <Welcome name="frank"/>\n')])])]),s("h4",{attrs:{id:"state-内部数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-内部数据"}},[t._v("#")]),t._v(" state(内部数据)")]),t._v(" "),s("ul",[s("li",[t._v("类组件首先要在 constructor 中初始化，然后可以用 this.state 读，this.setState 写(setState 最好使用函数)")]),t._v(" "),s("li",[t._v("函数组件用 useState 返回数组，第一项读，第二项写")]),t._v(" "),s("li",[t._v("类组件的 setState 会异步改变 n，函数组件的 setN 不会改变 n，而是会生成一个新的 n")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  function App() {\n      return (\n        <div>\n          爸爸<Son />\n        </div>\n      )}\n\n  class Son extends React.Component {\n      constructor() {\n        super();\n        this.state = {n: 0};\n      }\n      add() {\n        this.setState({ n: this.state.n + 1 });\n        // setState异步更新UI\n        this.setState(state=>{\n          const n = this.state.n + 1\n          console.log(n)\n          return {n}\n        })\n      }\n      render() {\n        return (\n          <div>\n            儿子 n: {this.state.n}\n            <button onClick={() => {this.add();}}>+1</button>\n            <Grandson />\n          </div>\n        )}\n  }\n\n  const Grandson = () => {\n      const [n, setN] = React.useState(0);\n      return (\n        <div>\n          孙子 n: {n}\n          <button onClick={() => setN(n + 1)}>+1</button>\n        </div>\n      )};\n")])])]),s("h4",{attrs:{id:"props-外部数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-外部数据"}},[t._v("#")]),t._v(" props(外部数据)")]),t._v(" "),s("ul",[s("li",[t._v("类组件直接读取属性 this.props.xxx")]),t._v(" "),s("li",[t._v("函数组件直接读取参数 props.xxx")])]),t._v(" "),s("h4",{attrs:{id:"复杂-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂-state"}},[t._v("#")]),t._v(" 复杂 state")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类组件的 setState 会自动合并第一层属性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Son extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      n: 0,\n      m: 0,\n    }\n  }\n  addN() {\n    this.setState({n: this.state.n + 1})\n  }\n  addM() {\n    this.setState({m: this.state.m + 1})\n  }\n  render() {\n    return (\n      <div>\n        n: {this.state.n}\n        <button onClick={()=>this.addN()}>n+1</button>\n        m: {this.state.m}\n        <button onClick={()=>this.addM()}>m+1</button>\n      </div>\n    )\n  }\n}\n")])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("函数组件不会自动合并，需要...运算符")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 写法1\n  const Grandson = () => {\n    const {n, setN} = React.useState(0)\n    const {m, setM} = React.useState(0)\n    return (\n      <div>\n        n: {n}\n        <button onCLick={() => setN(n+1)}>n+1</button>\n        m: {m}\n        <button onClick={() => setM(m+1)}>m+1</button>\n      </div>\n    )\n  }\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 写法2（不推荐）\n  const Grandson = () => {\n    const [state, setState] = React.useState({\n      n: 0, m: 0\n    })\n    return (\n      <div>\n        n: {state.n}\n        <button onClick={() => setState({...state, n:state.n+1})}>n+1</button>\n        m: {m}\n        <button onClick={() => setState({ ...state, m:state.m+1})}>m+1</button>\n      </div>\n    )\n  }\n")])])])]),t._v(" "),s("li",[s("p",[t._v("合并第二层属性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class father extends React.Component{\n    constructor(){\n      super()\n      this.state = {\n        m:0,\n        n:0,\n        user:{\n          name: 'Irelia',\n          age: 18\n        }\n      }\n    }\n    changeUser(){\n      // const user = Object.assign({}, this.state.use)\n      // const user = {...this.state.user}\n      this.setState({\n        user:{...this.state.user,name:\"frank\"}\n      })\n    }\n}\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"事件绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件绑定"}},[t._v("#")]),t._v(" 事件绑定")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 标准写法\n<button onClick={()=>this.addN()}>n+1</button>\n// addN 函数内部的 this 变成了 window\n<button onClick={this.addN}>n+1</button>\n\n// 最终写法\nclass Son extends React.Component{\n  /* constructor(){\n    this.addN = () => this.setState({n: this.state.n + 1})\n  } */\n  addN = () => this.setState({n: this.state.n+1}) // 等价于上面的三行代码\n  render(){\n    return <button onClick={this.addN}>n+1</button>\n  }\n}\n")])])]),s("ul",[s("li",[t._v("语法"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  class Person{\n    sayHi(){}\n    sayHi会放到原型身上\n  }\n  class Person2{\n    sayHi2 = () => {} // 等价于constructor(){this.sayHi2 = () => {}}\n    sayHi2会作为对象的属性\n  }\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"this-面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-面试题"}},[t._v("#")]),t._v(" this 面试题")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var length = 10;\nfunction fn(){\n  console.log(this.length)\n}\n\nvar obj ={\n  length: 5,\n  method: function(fn){\n    fn();\n    arguments[0]();\n  }\n}\n\nobj.methods(fn, 1); // 输出什么\n")])])]),s("ul",[s("li",[t._v("答案")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fn.call(undefined) // 10\narguments[0].call(arguments) // 2\n")])])]),s("h3",{attrs:{id:"react-vs-vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-vs-vue"}},[t._v("#")]),t._v(" React vs Vue")]),t._v(" "),s("ul",[s("li",[t._v("相同：\n"),s("ul",[s("li",[t._v("都是对视图的封装，React 是用类和函数表示一个组件，而 Vue 是通过构造选项构造一个组件")]),t._v(" "),s("li",[t._v("都提供了 createElement 的 XML 简写，React 提供的是 JSX 语法，而 Vue 提供的是模板写法")])])]),t._v(" "),s("li",[t._v("不同：\n"),s("ul",[s("li",[t._v("React 是把 HTMl 放在 JS 里面写，而 Vue 是把 JS 放在 HTML 里面写")])])])])])}),[],!1,null,null,null);n.default=a.exports}}]);