(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{382:function(t,v,_){"use strict";_.r(v);var n=_(14),e=Object(n.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/23/1669f5358f63c0f8~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),_("blockquote",[_("p",[t._v("从输入 URL 到页面加载完成，发生了什么？")])]),t._v(" "),_("ol",[_("li",[t._v("首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，")]),t._v(" "),_("li",[t._v("然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，")]),t._v(" "),_("li",[t._v("随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，")]),t._v(" "),_("li",[t._v("拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作（如下图所示）。")])]),t._v(" "),_("p",[t._v("我们将这个过程切分为如下的过程片段：")]),t._v(" "),_("p",[t._v("DNS 解析\nTCP 连接\nHTTP 请求抛出\n服务端处理请求，HTTP 响应返回\n浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户")]),t._v(" "),_("p",[t._v("具体来说，DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？\n能——浏览器 DNS 缓存和 DNS prefetch。")]),t._v(" "),_("p",[t._v("TCP 每次的三次握手都急死人，有没有解决方案？\n有——长连接、预连接、接入 SPDY 协议。")]),t._v(" "),_("p",[t._v("如果说这两个过程的优化往往需要我们和团队的服务端工程师协作完成，前端单方面可以做的努力有限，那么 HTTP 请求呢？\n——在减少请求次数和减小请求体积方面，我们应该是专家！再者，服务器越远，一次请求就越慢，那部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？")]),t._v(" "),_("p",[t._v("以上提到的都是网络层面的性能优化。再往下走就是浏览器端的性能优化——这部分涉及资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等——这正是前端工程师可以真正一展拳脚的地方。学习这些知识，不仅可以帮助我们从根本上提升页面性能，更能够大大加深个人对浏览器底层原理、运行机制的理解，一举两得！")]),t._v(" "),_("p",[t._v("我们将从网络层面和渲染层面两个大的维度来逐个点亮前端性能优化的技能树。")])])}),[],!1,null,null,null);v.default=e.exports}}]);