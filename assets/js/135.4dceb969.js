(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{418:function(t,e,a){"use strict";a.r(e);var s=a(14),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vue-js-内部运行的流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-内部运行的流程"}},[t._v("#")]),t._v(" Vue.js 内部运行的流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://rq9s5lc0q.hb-bkt.clouddn.com/blog/vue/vue_runtime_all.png?e=1676714832&token=T2pLxEmUwd9-tHhgpCQLKzpsG4xUBY7QSVH24GdD:Q2ABeTZOWCGM7_FTzhXp4XvSAJg=",alt:""}})]),t._v(" "),a("p",[t._v("Vue 运行的整体流程如上图所示，")]),t._v(" "),a("ol",[a("li",[t._v("通过 "),a("code",[t._v("new Vue()")]),t._v("进行初始化（根据组件使用方式决定是否挂载组件），使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 为声明的变量添加 "),a("code",[t._v("getter")]),t._v(" 和 "),a("code",[t._v("setter")]),t._v("；")]),t._v(" "),a("li",[t._v("然后进行编译，在编译中会依次进行下面这三个操作：\n"),a("ul",[a("li",[a("code",[t._v("parse")])]),t._v(" "),a("li",[a("code",[t._v("optimize")]),t._v("、")]),t._v(" "),a("li",[a("code",[t._v("generate")]),t._v("；")])])]),t._v(" "),a("li",[t._v("在初始化时绑定的 getter 和 setter 会对变量进行监听，变量修改后就可以调用 update 来更新视图。")]),t._v(" "),a("li",[t._v("render function 会借助真实 DOM 来生成一个虚拟 DOM 树，而在渲染时又可以把虚拟 DOM 渲染到视图中。")]),t._v(" "),a("li",[t._v("修改变量的值后，会触发 "),a("code",[t._v("setter")]),t._v("，同时生成一个新的 VNode。"),a("code",[t._v("patch")]),t._v(" 会把新的 VNode 和旧的 VNode 进行比较，从而得到他们的不同，最后把这些不同更新到视图中。")])]),t._v(" "),a("p",[t._v("接下来我们就逐个对这些模块进行学习")]),t._v(" "),a("h2",{attrs:{id:"初始化-组件挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化-组件挂载"}},[t._v("#")]),t._v(" 初始化，组件挂载")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://rq9s5lc0q.hb-bkt.clouddn.com/blog/vue/vue_runtime_part1.png?e=1676714901&token=T2pLxEmUwd9-tHhgpCQLKzpsG4xUBY7QSVH24GdD:QNLCtvJ5fRJT8JpyhBAMWCioZH8=",alt:""}})]),t._v(" "),a("p",[t._v("在 new Vue() 之后。 Vue 会调用 _init 函数进行初始化，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。同时会通过 Object.defineProperty 设置 setter 与 getter 函数，用来实现「响应式」以及「依赖收集」。")]),t._v(" "),a("p",[t._v("初始化之后调用 $mount 会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「编译」步骤。")]),t._v(" "),a("h2",{attrs:{id:"编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[t._v("#")]),t._v(" 编译")]),t._v(" "),a("p",[t._v("compile 编译可以分成 parse、optimize 与 generate 三个阶段，最终需要得到 render function。\n"),a("img",{attrs:{src:"http://rq9s5lc0q.hb-bkt.clouddn.com/blog/vue/vue_runtime_part2.png?e=1676714911&token=T2pLxEmUwd9-tHhgpCQLKzpsG4xUBY7QSVH24GdD:S9jFWOUBr3ad3ooINT-RxfNCNaY=",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parse"}},[t._v("#")]),t._v(" parse")]),t._v(" "),a("p",[t._v("parse 会用正则等方式解析 template 模板中的指令、class、style 等数据，形成 AST。")]),t._v(" "),a("h3",{attrs:{id:"optimize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimize"}},[t._v("#")]),t._v(" optimize")]),t._v(" "),a("p",[t._v("optimize 的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当 update 更新界面时，会有一个 patch 的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了 patch 的性能。")]),t._v(" "),a("h3",{attrs:{id:"generate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generate"}},[t._v("#")]),t._v(" generate")]),t._v(" "),a("p",[t._v("generate 是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。")]),t._v(" "),a("p",[t._v("在经历过 parse、optimize 与 generate 这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。")]),t._v(" "),a("h2",{attrs:{id:"响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[t._v("#")]),t._v(" 响应式")]),t._v(" "),a("p",[t._v("接下来也就是 Vue.js 响应式核心部分。\n"),a("img",{attrs:{src:"http://rq9s5lc0q.hb-bkt.clouddn.com/blog/vue/vue_runtime_part3.png?e=1676714926&token=T2pLxEmUwd9-tHhgpCQLKzpsG4xUBY7QSVH24GdD:8OY_ZmVwGlqZqkKahXAV_ip4fqg=",alt:""}}),t._v("\n这里的 getter 跟 setter 已经在之前介绍过了，在 init 的时候通过 Object.defineProperty 进行了绑定，它使得当被设置的对象被读取的时候会执行 getter 函数，而在当被赋值的时候会执行 setter 函数。")]),t._v(" "),a("p",[t._v("当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发 getter 函数进行「依赖收集」，「依赖收集」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。")]),t._v(" "),a("p",[t._v("在修改对象的值的时候，会触发对应的 setter， setter 通知之前「依赖收集」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用 update 来更新视图，当然这中间还有一个 patch 的过程以及使用队列来异步更新的策略，这个我们后面再讲。")]),t._v(" "),a("h2",{attrs:{id:"虚拟-dom-virtual-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-virtual-dom"}},[t._v("#")]),t._v(" 虚拟 DOM (Virtual DOM)")]),t._v(" "),a("p",[t._v("我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。\n比如说下面这样一个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*说明这是一个div标签*/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*存放该标签的子节点*/")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*说明这是一个a标签*/")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click me'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*标签的内容*/")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("渲染后可以得到")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("click me"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。")]),t._v(" "),a("h2",{attrs:{id:"更新视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新视图"}},[t._v("#")]),t._v(" 更新视图")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://rq9s5lc0q.hb-bkt.clouddn.com/blog/vue/vue_runtime_part4.png?e=1676715171&token=T2pLxEmUwd9-tHhgpCQLKzpsG4xUBY7QSVH24GdD:nx_QBXCfXZLW5RzmjouvDG7JG3k=",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1),t._v("\n前面我们说到，在修改一个对象值的时候，会通过 setter -> Watcher -> update 的流程来修改对应的视图，那么最终是如何更新视图的呢？")]),t._v(" "),a("p",[t._v("当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用 innerHTML 直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「浪费」。")]),t._v(" "),a("p",[t._v("那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「patch」了。我们会将新的 VNode 与旧的 VNode 一起传入 patch 进行比较，经过 diff 算法得出它们的「差异」。最后我们只需要将这些「差异」的对应 DOM 进行修改即可。")])])}),[],!1,null,null,null);e.default=r.exports}}]);