(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{423:function(e,t,a){"use strict";a.r(t);var n=a(14),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h4",{attrs:{id:"vue-是一套用于构建用户界面的渐进式框架-vue-的核心库只关注视图层。-vue-文档已经把-vue-的特点说的很清楚了-vue-是专注于-ui-界面的框架-数据的修改会实时的反馈到界面中。这就是数据响应式了-通过数据来驱动视图。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-是一套用于构建用户界面的渐进式框架-vue-的核心库只关注视图层。-vue-文档已经把-vue-的特点说的很清楚了-vue-是专注于-ui-界面的框架-数据的修改会实时的反馈到界面中。这就是数据响应式了-通过数据来驱动视图。"}},[e._v("#")]),e._v(" “Vue 是一套用于构建用户界面的渐进式框架，Vue 的核心库只关注视图层。” Vue 文档已经把 Vue 的特点说的很清楚了，Vue 是专注于 UI 界面的框架，数据的修改会实时的反馈到界面中。这就是数据响应式了，通过数据来驱动视图。")]),e._v(" "),a("p",[e._v("在 Vue 文档深入响应式原理中，Vue 是这样说的：“\n"),a("strong",[e._v("当你把一个对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。")]),e._v("\n”那么 Vue 具体是怎么做的呢？")]),e._v(" "),a("p",[e._v("Vue 响应式原理: https://cn.vuejs.org/v2/guide/reactivity.html")]),e._v(" "),a("h4",{attrs:{id:"_1-先来了解一下-getter-setter-和-object-defineproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-先来了解一下-getter-setter-和-object-defineproperty"}},[e._v("#")]),e._v(" 1.先来了解一下 getter, setter 和 Object.defineProperty")]),e._v(" "),a("ul",[a("li",[e._v("getter: 不要括号就可以调用的函数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    let obj2 = {\n      姓: "高",\n      名: "圆圆",\n      get name() {\n        return this.姓 + this.名;\n      },\n    };\n    console.log("需求二：" + obj2.name);\n')])])]),a("ul",[a("li",[e._v("setter: 传入一个值并把这个值赋值给其他变量")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    let obj3 = {\n      姓: "高",\n      名: "圆圆",\n      get name() {\n        return this.姓 + this.名;\n      },\n      set name(xxx){\n        this.姓 = xxx[0]\n        this.名 = xxx.slice(1)\n      },\n    };\n    obj3.name = \'高媛媛\'\n    console.log(`需求三：姓 ${obj3.姓}，名 ${obj3.名}`)\n')])])]),a("ul",[a("li",[e._v("Object.defineProperty: 可以给对象添加属性 value，可以给对象的属性添加 getter 和 setter，对属性的读写进行监控")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  let _name = '王尼玛'\n  Object.defineProperty(obj3, 'myName', {\n      get(){\n        return _name\n      },\n      set(value){\n        _name = value\n      }\n  })\n")])])]),a("h4",{attrs:{id:"_2-代理-设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-代理-设计模式"}},[e._v("#")]),e._v(" 2.代理(设计模式)")]),e._v(" "),a("ul",[a("li",[e._v("n 不能设置为小于 0 的数字(可以通过直接对 data._n 进行赋值，绕过了 Object.defineProperty)"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let data = {}\ndata._n = 0  // data._n = -1\nObject.defineProperty(data, 'n', {\n      get(){\n        return this._n\n      },\n      set(value){\n        if(value < 0) return\n        this._n = value\n      }\n})\n")])])])])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("设置为匿名对象，让你无法访问，也就无法修改(\n为匿名对象添加名字，修改匿名对象，又绕开了)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// let myData = {data:{n:0}}\n// let data = proxy(data:myData)\nlet data = proxy({ data:{n:0} }) // 括号里是匿名对象，无法访问\nfunction proxy({data}){\n      const obj = {}\n      Object.defineProperty(obj, 'n', {\n        get(){\n          return data.n\n        },\n        set(value){\n          if(value<0)return\n          data.n = value\n        }\n      })\n      return obj // obj 就是代理\n}\n")])])])]),e._v(" "),a("li",[a("p",[e._v("把 myData 监听起来，myData.n 也无法设置为小于 0 的数值(最终方案)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myData = {n:0}\nlet data = proxy({ data:myData })\nfunction proxy({data}){\n      let value = data.n  // 监听 data\n       // delete data.n   可以不写，下面的代码会把data.n覆盖掉\n      Object.defineProperty(data, 'n', {\n          get(){\n            return value\n          },\n          set(newValue){\n            if(newValue<0)return\n            value = newValue\n          }\n      })\n      const obj = {}\n      Object.defineProperty(obj, 'n', {\n          get(){\n            return data.n\n          },\n          set(value){\n              data.n = value\n          }\n      })\n      return obj // obj 就是代理\n}\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Vue 其实就是让 vm 成为 myData 的代理\n(proxy)，然后对 myData 的所有属性进行监控，如果属性有所改变，就会调用 render 函数重新渲染页面。")])])]),e._v(" "),a("h4",{attrs:{id:"_3-数据响应式失效的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据响应式失效的例子"}},[e._v("#")]),e._v(" 3.数据响应式失效的例子：")]),e._v(" "),a("ul",[a("li",[e._v("data 存在一个 bug(数据没有提前声明导致不会在页面中显示)\n"),a("ul",[a("li",[e._v("obj.b 并没有声明，所以不会被监听(Vue 只会检查第一层属性)")])]),e._v(" "),a("ul",[a("li",[e._v("Vue.set / this.$set 自动创建代理和监听，触发 UI 更新")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Vue({\n        data:{\n          obj: {\n            a:0\n          }\n        },\n        template: `\n          <div>\n            {{obj.b}}\n            <button @click=\"setB\">set B</button>\n          </div>\n        `,\n        methods:{\n          setB(){\n            this.obj.b = 1  // Vue没有监听，所以不会显示\n            Vue.set(this.obj, 'b', 1)\n            this.$set(this.obj, 'b', 1)\n          }\n        }\n}).$mount('#app')\n")])])])])]),e._v(" "),a("h4",{attrs:{id:"_4-vue-内部对-array-的方法的加工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue-内部对-array-的方法的加工"}},[e._v("#")]),e._v(" 4.Vue 内部对 array 的方法的加工")]),e._v(" "),a("ul",[a("li",[e._v("array 无法提前声明，可以使用 Vue.set 但没必要。Vue 篡改了数组的部分 API，使我们可以直接使用(https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95-mutation-method)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" new Vue({\n        data:{\n          array: ['a', 'b', 'c']\n        },\n        template: `\n          <div>\n            {{obj.b}}\n            <button @click=\"setD\">set D</button>\n          </div>\n        `,\n        methods:{\n          setD(){\n            this.array[3] = 'd'\n            this.array.push('d') // 被修改过的push方法\n          }\n        }\n}).$mount('#app')\n")])])]),a("ul",[a("li",[e._v("Vue 内部把数组的每一项都进行了监听，并在我们 push 的时候，直接调用了数组原生 API"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class VueArray extends Array{\n      push(...args){\n        const oldLength = this.length\n        super.push(...args)\n        for(let i = oldLength; i < this.length; i++){\n          Vue.set(this, i, this[i])\n        }\n      }\n}\n")])])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);