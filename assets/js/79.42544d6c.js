(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{357:function(i,t,v){"use strict";v.r(t);var _=v(14),l=Object(_.a)({},(function(){var i=this,t=i.$createElement,v=i._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h2",{attrs:{id:"新建-git-代码库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新建-git-代码库"}},[i._v("#")]),i._v(" 新建 git 代码库")]),i._v(" "),v("ul",[v("li",[i._v("git init 在当前目录新建一个 git 库")]),i._v(" "),v("li",[i._v("git init [项目名] 新建一个目录，并初始化为 git 代码库")]),i._v(" "),v("li",[i._v("git clone [url] 下载一个项目和它的代码历史")])]),i._v(" "),v("h2",{attrs:{id:"配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[i._v("#")]),i._v(" 配置")]),i._v(" "),v("ul",[v("li",[i._v("Git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。")]),i._v(" "),v("li",[i._v("git config --list 显示当前的 Git 配置")]),i._v(" "),v("li",[i._v("git config -e [--global] 编辑 Git 配置文件")]),i._v(" "),v("li",[i._v('git config [--global] user.name "[name]" 设置提交代码时的用户信息')]),i._v(" "),v("li",[i._v('git config [--global] user.email "[email address]" 设置提交代码时的用户信息')])]),i._v(" "),v("h2",{attrs:{id:"增加-删除文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#增加-删除文件"}},[i._v("#")]),i._v(" 增加/删除文件")]),i._v(" "),v("ul",[v("li",[i._v("git add [file1][file2] ... 添加指定文件到暂存区")]),i._v(" "),v("li",[i._v("git add [dir] 添加指定目录到暂存区，包括子目录")]),i._v(" "),v("li",[i._v("git add . 添加当前目录的所有文件到暂存区")]),i._v(" "),v("li",[i._v("git add -p 添加每个变化前，都会要求确认。对于同一个文件的多处变化，可以实现分次提交")]),i._v(" "),v("li",[i._v("git rm [file1][file2] ... 删除工作区文件，并且将这次删除放入暂存区")]),i._v(" "),v("li",[i._v("git rm --cached [file] 停止追踪指定文件，但该文件会保留在工作区")]),i._v(" "),v("li",[i._v("git mv [file-original][file-renamed] 改名文件，并且将这个改名放入暂存区")])]),i._v(" "),v("h2",{attrs:{id:"代码提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[i._v("#")]),i._v(" 代码提交")]),i._v(" "),v("ul",[v("li",[i._v("git commit -m [message] 提交暂存区到仓库区")]),i._v(" "),v("li",[i._v("git commit [file1][file2] ... -m [message] 提交暂存区的指定文件到仓库区")]),i._v(" "),v("li",[i._v("git commit -a 提交工作区自上次 commit 之后的变化，直接到仓库区")]),i._v(" "),v("li",[i._v("git commit -v 提交时显示所有 diff 信息")]),i._v(" "),v("li",[i._v("git commit --amend -m [message] 使用一次新的 commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次 commit 的提交信息")]),i._v(" "),v("li",[i._v("git commit --amend [file1][file2] ... 重做上一次 commit，并包括指定文件的新变化")])]),i._v(" "),v("h2",{attrs:{id:"分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[i._v("#")]),i._v(" 分支")]),i._v(" "),v("ul",[v("li",[i._v("git branch 查看本地所有分支")]),i._v(" "),v("li",[i._v("git branch -r 查看远程所有分支")]),i._v(" "),v("li",[i._v("git branch -a 查看本地所有分支和远程所有分支")]),i._v(" "),v("li",[i._v("git branch [branch-name] 新建一个分支，但依然停留在当前分支")]),i._v(" "),v("li",[i._v("git checkout -b [branch] 新建一个分支，并切换到该分支")]),i._v(" "),v("li",[i._v("git branch [branch][commit] 新建一个分支，指向指定 commit")]),i._v(" "),v("li",[i._v("git branch --track [branch][remote-branch] 新建一个分支，与指定的远程分支建立追踪关系")]),i._v(" "),v("li",[i._v("git checkout [branch-name] 切换到指定分支，并更新工作区")]),i._v(" "),v("li",[i._v("git checkout - 切换到上一个分支")]),i._v(" "),v("li",[i._v("git branch --set-upstream [branch][remote-branch] 建立追踪关系，在现有分支与指定的远程分支之间")]),i._v(" "),v("li",[i._v("git merge [branch] 合并指定分支到当前分支")]),i._v(" "),v("li",[i._v("git cherry-pick [commit] 选择一个 commit，合并进当前分支")]),i._v(" "),v("li",[i._v("git branch -d [branch-name] 删除分支")]),i._v(" "),v("li",[i._v("git push origin --delete [branch-name] 删除远程分支")]),i._v(" "),v("li",[i._v("git branch -dr [remote/branch] 删除远程分支")])]),i._v(" "),v("h2",{attrs:{id:"查看信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[i._v("#")]),i._v(" 查看信息")]),i._v(" "),v("ul",[v("li",[i._v("git status 显示有变更的文件")]),i._v(" "),v("li",[i._v("git log 显示当前分支的版本历史")]),i._v(" "),v("li",[i._v("git log --stat 显示 commit 历史，以及每次 commit 发生变更的文件")]),i._v(" "),v("li",[i._v("git log -S [keyword] 搜索提交历史，根据关键词")]),i._v(" "),v("li",[i._v("git log [tag] HEAD --pretty=format:%s 显示某个 commit 之后的所有变动，每个 commit 占据一行")]),i._v(" "),v("li",[i._v('git log [tag] HEAD --grep feature 显示某个 commit 之后的所有变动，其"提交说明"必须符合搜索条件')]),i._v(" "),v("li",[i._v("git log --follow [file] 显示某个文件的版本历史，包括文件改名")]),i._v(" "),v("li",[i._v("git whatchanged [file] 显示某个文件的版本历史，包括文件改名")]),i._v(" "),v("li",[i._v("git log -p [file] 显示指定文件相关的每一次 diff")]),i._v(" "),v("li",[i._v("git log -5 --pretty --oneline 显示过去 5 次提交")]),i._v(" "),v("li",[i._v("git shortlog -sn 显示所有提交过的用户，按提交次数排序")]),i._v(" "),v("li",[i._v("git blame [file] 显示指定文件是什么人在什么时间修改过")]),i._v(" "),v("li",[i._v("git diff 显示暂存区和工作区的差异")]),i._v(" "),v("li",[i._v("git diff --cached [file] 显示暂存区和上一个 commit 的差异")]),i._v(" "),v("li",[i._v("git diff HEAD 显示工作区与当前分支最新 commit 之间的差异")]),i._v(" "),v("li",[i._v("git diff [first-branch]...[second-branch] 显示两次提交之间的差异")]),i._v(" "),v("li",[i._v('git diff --shortstat "@{0 day ago}" 显示今天你写了多少行代码')]),i._v(" "),v("li",[i._v("git show [commit] 显示某次提交的元数据和内容变化")]),i._v(" "),v("li",[i._v("git show --name-only [commit] 显示某次提交发生变化的文件")]),i._v(" "),v("li",[i._v("git show [commit]:[filename] 显示某次提交时，某个文件的内容")]),i._v(" "),v("li",[i._v("git reflog 显示当前分支的最近几次提交")])]),i._v(" "),v("h2",{attrs:{id:"远程同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[i._v("#")]),i._v(" 远程同步")]),i._v(" "),v("ul",[v("li",[i._v("git fetch [remote] 下载远程仓库的所有变动")]),i._v(" "),v("li",[i._v("git remote -v 显示所有远程仓库")]),i._v(" "),v("li",[i._v("git remote show [remote] 显示某个远程仓库的信息")]),i._v(" "),v("li",[i._v("git remote add [shortname][url] 增加一个新的远程仓库，并命名")]),i._v(" "),v("li",[i._v("git pull [remote][branch] 取回远程仓库的变化，并与本地分支合并")]),i._v(" "),v("li",[i._v("git push [remote][branch] 上传本地指定分支到远程仓库")]),i._v(" "),v("li",[i._v("git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突")]),i._v(" "),v("li",[i._v("git push [remote] --all 推送所有分支到远程仓库")])]),i._v(" "),v("h2",{attrs:{id:"撤销"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[i._v("#")]),i._v(" 撤销")]),i._v(" "),v("ul",[v("li",[i._v("git checkout [file] 恢复暂存区的指定文件到工作区")]),i._v(" "),v("li",[i._v("git checkout [commit][file] 恢复某个 commit 的指定文件到暂存区和工作区")]),i._v(" "),v("li",[i._v("git checkout . 恢复暂存区的所有文件到工作区")]),i._v(" "),v("li",[i._v("git reset [file] 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变")]),i._v(" "),v("li",[i._v("git reset --hard 重置暂存区与工作区，与上一次 commit 保持一致")]),i._v(" "),v("li",[i._v("git reset [commit] 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变")]),i._v(" "),v("li",[i._v("git reset --hard [commit] 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致")]),i._v(" "),v("li",[i._v("git reset --keep [commit] 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变")]),i._v(" "),v("li",[i._v("git revert [commit] 新建一个 commit，用来撤销指定 commit\n。后者的所有变化都将被前者抵消，并且应用到当前分支")]),i._v(" "),v("li",[i._v("git stash 暂时将未提交的变化移除，稍后再移入")]),i._v(" "),v("li",[i._v("git stash pop 暂时将未提交的变化移除，稍后再移入")])]),i._v(" "),v("h2",{attrs:{id:"发布"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#发布"}},[i._v("#")]),i._v(" 发布")]),i._v(" "),v("ul",[v("li",[i._v("git archive 生成一个可供发布的压缩包")])])])}),[],!1,null,null,null);t.default=l.exports}}]);