(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{321:function(s,t,a){"use strict";a.r(t);var e=a(14),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"使用-jest-进行测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-jest-进行测试"}},[s._v("#")]),s._v(" 使用 jest 进行测试")]),s._v(" "),a("h2",{attrs:{id:"设计测试用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计测试用例"}},[s._v("#")]),s._v(" 设计测试用例")]),s._v(" "),a("h2",{attrs:{id:"单元测试、功能测试、集成测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试、功能测试、集成测试"}},[s._v("#")]),s._v(" 单元测试、功能测试、集成测试")]),s._v(" "),a("h2",{attrs:{id:"白盒测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#白盒测试"}},[s._v("#")]),s._v(" 白盒测试")]),s._v(" "),a("p",[s._v("重点：")]),s._v(" "),a("ul",[a("li",[s._v("单元测试不应该与外界打交道")]),s._v(" "),a("li",[s._v("单元测试的对象是函数")]),s._v(" "),a("li",[s._v("功能测试的对象是模块")]),s._v(" "),a("li",[s._v("集成测试的对象是系统（会和外界打交道）")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("yarn add --dev jest\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('在package.json中添加\n"scripts":{\n  "test":"jest"\n}\n')])])]),a("h2",{attrs:{id:"在项目目录下新建一个-test-文件夹-用来放测试文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在项目目录下新建一个-test-文件夹-用来放测试文件"}},[s._v("#")]),s._v(" 在项目目录下新建一个 test 文件夹，用来放测试文件")]),s._v(" "),a("h2",{attrs:{id:"命名规范-单元测试通常叫做-db-unit-js-或-db-spec-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名规范-单元测试通常叫做-db-unit-js-或-db-spec-js"}},[s._v("#")]),s._v(" 命名规范，单元测试通常叫做 db.unit.js 或 db.spec.js")]),s._v(" "),a("p",[s._v("describe 描述\nit 它（要测试的对象）\nexpect\ntoBe")]),s._v(" "),a("h2",{attrs:{id:"测试-fs-的读取功能是否有效-怎么测试呢-当然是在一个文件中写一些东西-然后判断是否可以正确的读取到内容。但是-这样需要依赖外部环境-新建文件以及输入内容-测试结果就会受到外部因素的影响-可能并不准确。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试-fs-的读取功能是否有效-怎么测试呢-当然是在一个文件中写一些东西-然后判断是否可以正确的读取到内容。但是-这样需要依赖外部环境-新建文件以及输入内容-测试结果就会受到外部因素的影响-可能并不准确。"}},[s._v("#")]),s._v(" 测试 fs 的读取功能是否有效，怎么测试呢？当然是在一个文件中写一些东西，然后判断是否可以正确的读取到内容。但是，这样需要依赖外部环境，新建文件以及输入内容，测试结果就会受到外部因素的影响，可能并不准确。")]),s._v(" "),a("h2",{attrs:{id:"那么-我们应该怎么做呢-jest-提供了一种方式-就是使用模拟的文件系统来进行操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那么-我们应该怎么做呢-jest-提供了一种方式-就是使用模拟的文件系统来进行操作"}},[s._v("#")]),s._v(" 那么，我们应该怎么做呢，jest 提供了一种方式，就是使用模拟的文件系统来进行操作")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// __mock__/fs.js\nconst fs = jest.genMockFromModule('fs');\n\nfs.x = () => {\n  console.log('hello mock');\n  return 'xxx'\n}\n\nmodule.exports = fs\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// db.spec.js\nconst fs = require('fs')\njest.mock('fs')\n")])])]),a("h1",{attrs:{id:"将路径放入-mock-中-在执行模拟读写文件操作时-判断路径是否在-mock-中-如果在-mock-中-则在模拟文件上进行读写操作。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将路径放入-mock-中-在执行模拟读写文件操作时-判断路径是否在-mock-中-如果在-mock-中-则在模拟文件上进行读写操作。"}},[s._v("#")]),s._v(" 将路径放入 mock 中，在执行模拟读写文件操作时，判断路径是否在 mock 中，如果在 mock 中，则在模拟文件上进行读写操作。")]),s._v(" "),a("h1",{attrs:{id:"在测试结束后要清除-mock-防止互相影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在测试结束后要清除-mock-防止互相影响"}},[s._v("#")]),s._v(" 在测试结束后要清除 mock，防止互相影响")])])}),[],!1,null,null,null);t.default=r.exports}}]);