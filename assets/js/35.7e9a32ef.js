(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{311:function(a,t,n){"use strict";n.r(t);var e=n(14),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"js-垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-垃圾回收"}},[a._v("#")]),a._v(" JS 垃圾回收")]),a._v(" "),n("p",[a._v("参考文章：https://javascript.info/garbage-collection")]),a._v(" "),n("h3",{attrs:{id:"如何判定是否为垃圾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何判定是否为垃圾"}},[a._v("#")]),a._v(" 如何判定是否为垃圾")]),a._v(" "),n("ol",[n("li",[a._v("基本垃圾回收")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    let user = {\n      name: "John",\n    };\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('使用 `user = null` 覆盖引用， 对象`{ name: "John" }`无法被访问到，也没有变量引用它，它就会被当作垃圾进行回收。\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[a._v("如果还有引用则不会被当做垃圾")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    let user = {\n      name: "John",\n    };\n\n    let admin = user;\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('还是使用 `user = null` 覆盖引用， 此时 user 失去了对象`{ name: "John" }`的引用，但 admin 依然引用了该对象，它不会被当作垃圾进行回收。\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[a._v("对象之间的互相引用")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    function marry(man, woman) {\n      woman.husband = man;\n      man.wife = woman;\n\n      return {\n        father: man,\n        mother: woman,\n      };\n    }\n\n    let family = marry(\n      {\n        name: "John",\n      },\n      {\n        name: "Ann",\n      }\n    );\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("尝试删除对 father 的引用\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" family"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("father"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" family"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mother"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("husband"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("此时，没有任何变量引用 father，father 会被当作垃圾。\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[a._v("删除 family、father、mother"),n("br"),a._v("\n使用"),n("code",[a._v("family = null")]),a._v("即可删除，family 对象失去了变量的引用，没有名字了，无法被使用，失去了存在的价值，变成了垃圾。同时，虽然没有直接删除 father 对象和 mother 对象的引用，但 family 对象删除后，它们也无法被访问到，也就无法使用。")])]),a._v(" "),n("h3",{attrs:{id:"垃圾收集算法-标记清除算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法-标记清除算法"}},[a._v("#")]),a._v(" 垃圾收集算法（标记清除算法）")]),a._v(" "),n("ol",[n("li",[n("p",[a._v("原理")]),a._v(" "),n("ul",[n("li",[a._v("因为全局对象被 window 引用，所以不会被回收。那么被 window 直接或者间接引用的也不会被当做垃圾。")]),a._v(" "),n("li",[a._v("标记清除算法就是通过层层遍历，对 window 直接或者间接引用的对象进行标记，然后把未被标记的对象删除掉。")]),a._v(" "),n("li",[a._v("但是会影响 JS 运行，并且效率较低")])])]),a._v(" "),n("li",[n("p",[a._v("优化（JavaScript 引擎进行了许多优化，以使其运行更快并且不影响执行。）")]),a._v(" "),n("ul",[n("li",[a._v("分类收集"),n("br"),a._v("\n将对象分为两组：“新的”和“旧的”。许多“新的”出现，执行并迅速死亡，因此可以积极地检查并清理它们。而那些保存时间足够长的人会变得“老”，可以降低它们接受检查的频率。")]),a._v(" "),n("li",[a._v("增量收集"),n("br"),a._v("\n如果有很多对象，并且我们尝试同时遍历并标记整个对象集，可能要花费较长时间，并导致 JS 执行过程中有明显的延迟。因此，引擎尝试将垃圾收集分为几部分。然后，分别地执行这些片段。这需要在它们之间进行额外的标记以跟踪更改，这样就可以分为很多短暂的延迟，而不是长时间的延迟。")]),a._v(" "),n("li",[a._v("空闲时间收集"),n("br"),a._v("\n垃圾收集器仅在 CPU 空闲时尝试运行，以减少对执行的可能影响。")])])]),a._v(" "),n("li",[n("p",[a._v("JS 不仅有 JS，还有 DOM")]),a._v(" "),n("ul",[n("li",[a._v("删除页面中的 DOM 元素，内存中依然存在（不被回收）")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("     <div id=\"xxx\"></div>\n\n     var div = document.getElementById('xxx')\n     div.onclick = function() {}\n     setTimeout(function(){\n       div.remove()\n     },2000)\n")])])]),n("ul",[n("li",[a._v("此时的 div 指向'xxx'的引用，使用"),n("code",[a._v("div = null")]),a._v("只是删除了变量 div 对 DOM div 的引用，页面中的 div 依然存在，依然可能会被引用。（不被回收）")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('     <div id="xxx"></div>;\n\n     var div = document.getElementById("xxx");\n     div.onclick = function () {};\n     setTimeout(function () {\n       div = null;\n       var div2 = document.getElementById("xxx");\n       console.log(div2.onclick);\n     }, 2000);\n')])])]),n("ul",[n("li",[a._v("那么，怎么把这个 DOM 对象 div 变成垃圾呢?")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('     <div id="xxx"></div>;\n\n     var div = document.getElementById("xxx");\n     div.onclick = function () {};\n     setTimeout(function () {\n       div.remove();\n       div = null;\n       div.onclick = null; // IE还需要添加这行代码\n     }, 2000);\n')])])]),n("ul",[n("li",[a._v("删除变量 div 引用的同时，删除页面中的 DOM div，这样一来就无法引用到 div 了，就会被回收。")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);